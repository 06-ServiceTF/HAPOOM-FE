[{"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\auth\\SignIn.tsx":"1","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\auth\\SignUp.tsx":"2","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\index.tsx":"3","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\post\\Write.tsx":"4","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\_app.tsx":"5","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\_document.tsx":"6","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ContentArea.tsx":"7","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\Dropzone.tsx":"8","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ImagePreview.tsx":"9","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\MapComponent.tsx":"10","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\Tag.tsx":"11","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\TagInput.tsx":"12","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\YoutubePlayer.tsx":"13","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\YoutubeSearchInput.tsx":"14","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SignInUi.tsx":"15","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SocialLogIn.tsx":"16","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SingUpUi.tsx":"17","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\PostLike.tsx":"18","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\UserLikePostSuggestion.tsx":"19","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\UserProfileCard.tsx":"20","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\UserUi.tsx":"21","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\Footer.tsx":"22","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\Header.tsx":"23","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\MobileBottomNav.tsx":"24","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\SideNav.tsx":"25","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\HashtagContents.tsx":"26","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\HashtagNavBar.tsx":"27","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\ImageContent.tsx":"28","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Footer.tsx":"29","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Header.tsx":"30","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\MobileBottomNav.tsx":"31","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\SideNav.tsx":"32","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\setting\\Setting.tsx":"33","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\AccordianMenu.tsx":"34","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\AuthChecker.tsx":"35","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Button.tsx":"36","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\IconButton.tsx":"37","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\Input.tsx":"38","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\Themes.tsx":"39","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\UpdateNickName.tsx":"40","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\UpdatePassword.tsx":"41","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\UpdateUserProfile.tsx":"42","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\detail\\[id].tsx":"43","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\auth\\SocialSuccess.tsx":"44","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\findPassword\\FindPwd.tsx":"45","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\findPwdComplete\\FindPwdComplete.tsx":"46","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\search\\index.tsx":"47","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\signUpComplete\\SignUpComplete.tsx":"48","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\User\\FollowTab.tsx":"49","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\User\\[id].tsx":"50","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\AlarmBar.tsx":"51","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\CommentModal.tsx":"52","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\HeartIcon.tsx":"53","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\KebabMenuUI.tsx":"54","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\layout\\Layout.tsx":"55","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Modal.tsx":"56","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\ProfileImage.tsx":"57","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\SelectUI.tsx":"58","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\SVG.tsx":"59","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\TabBarLinkButton.tsx":"60","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\UpAndDownTab.tsx":"61","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\Comment.tsx":"62","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\DetailProfile.tsx":"63","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\FindPassword\\FindPassword.tsx":"64","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\MainBanner.tsx":"65","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\PopularContentsCarousel.tsx":"66","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Search\\SearchResult.tsx":"67","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\Profile.tsx":"68","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\FollowButton.tsx":"69","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\Accordion.tsx":"70","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\CustomPlayer.tsx":"71","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\MusicSelector.tsx":"72","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\RecordingInfo.tsx":"73","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\RecordPlayer.tsx":"74","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\CustomButton.tsx":"75","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\update\\[id].tsx":"76","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ReadOnlyMap.tsx":"77","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ReadOnlyYoutube.tsx":"78","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\FollowList.tsx":"79","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\RecordButton.tsx":"80","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\DetailComments.tsx":"81","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Feed\\FeedUi.tsx":"82","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\InfiniteCarousel.tsx":"83","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Search\\UserSearchResult.tsx":"84","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SignInControls.tsx":"85","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SignInInput.tsx":"86","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpCheck.tsx":"87","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpControl.tsx":"88","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpNickname.tsx":"89","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpPwd.tsx":"90","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Search\\SearchComponent.tsx":"91","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\OneButtonModal.tsx":"92","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Socket.tsx":"93","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Tabs.tsx":"94","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\CommentForm.tsx":"95","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\DetailKebabMenu.tsx":"96","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\ZoomImage.tsx":"97","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Feed\\FeedPost.tsx":"98","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\feed\\index.tsx":"99","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\MoveStartpage.tsx":"100","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\ThemedApp.tsx":"101","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\ThemeInitializer.tsx":"102","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\api\\auth\\[...nextauth].ts":"103"},{"size":283,"mtime":1693019107197,"results":"104","hashOfConfig":"105"},{"size":283,"mtime":1693019107198,"results":"106","hashOfConfig":"105"},{"size":4952,"mtime":1693716769208,"results":"107","hashOfConfig":"105"},{"size":18207,"mtime":1693719434204,"results":"108","hashOfConfig":"105"},{"size":2874,"mtime":1693707682565,"results":"109","hashOfConfig":"105"},{"size":1257,"mtime":1693486426772,"results":"110","hashOfConfig":"105"},{"size":1611,"mtime":1693716127402,"results":"111","hashOfConfig":"105"},{"size":5961,"mtime":1693716127452,"results":"112","hashOfConfig":"105"},{"size":2070,"mtime":1693716127436,"results":"113","hashOfConfig":"105"},{"size":11555,"mtime":1693716127316,"results":"114","hashOfConfig":"105"},{"size":1328,"mtime":1693716127362,"results":"115","hashOfConfig":"105"},{"size":3711,"mtime":1693716127424,"results":"116","hashOfConfig":"105"},{"size":5675,"mtime":1693716127345,"results":"117","hashOfConfig":"105"},{"size":4985,"mtime":1693716127429,"results":"118","hashOfConfig":"105"},{"size":3781,"mtime":1693717652827,"results":"119","hashOfConfig":"105"},{"size":2388,"mtime":1693722197155,"results":"120","hashOfConfig":"105"},{"size":8904,"mtime":1693717652827,"results":"121","hashOfConfig":"105"},{"size":6227,"mtime":1693716697443,"results":"122","hashOfConfig":"105"},{"size":787,"mtime":1693716127335,"results":"123","hashOfConfig":"105"},{"size":2041,"mtime":1693719864072,"results":"124","hashOfConfig":"105"},{"size":2264,"mtime":1693719849285,"results":"125","hashOfConfig":"105"},{"size":909,"mtime":1691378474450,"results":"126","hashOfConfig":"127"},{"size":2375,"mtime":1691378474450,"results":"128","hashOfConfig":"127"},{"size":1691,"mtime":1691378474451,"results":"129","hashOfConfig":"127"},{"size":1672,"mtime":1691380044845,"results":"130","hashOfConfig":"127"},{"size":2249,"mtime":1693716127358,"results":"131","hashOfConfig":"105"},{"size":5050,"mtime":1693716127307,"results":"132","hashOfConfig":"105"},{"size":1077,"mtime":1693716127390,"results":"133","hashOfConfig":"105"},{"size":806,"mtime":1693716127372,"results":"134","hashOfConfig":"105"},{"size":7297,"mtime":1693716127442,"results":"135","hashOfConfig":"105"},{"size":4578,"mtime":1693713611804,"results":"136","hashOfConfig":"105"},{"size":2858,"mtime":1693716697493,"results":"137","hashOfConfig":"105"},{"size":3308,"mtime":1693719463950,"results":"138","hashOfConfig":"105"},{"size":1620,"mtime":1693373505127,"results":"139","hashOfConfig":"105"},{"size":994,"mtime":1693716697461,"results":"140","hashOfConfig":"105"},{"size":1213,"mtime":1693717652828,"results":"141","hashOfConfig":"105"},{"size":851,"mtime":1693272026134,"results":"142","hashOfConfig":"105"},{"size":659,"mtime":1692697047618,"results":"143","hashOfConfig":"105"},{"size":1582,"mtime":1693716697471,"results":"144","hashOfConfig":"105"},{"size":3359,"mtime":1693717652825,"results":"145","hashOfConfig":"105"},{"size":4601,"mtime":1693716697481,"results":"146","hashOfConfig":"105"},{"size":3808,"mtime":1693716697537,"results":"147","hashOfConfig":"105"},{"size":6546,"mtime":1693719412699,"results":"148","hashOfConfig":"105"},{"size":687,"mtime":1693716697498,"results":"149","hashOfConfig":"105"},{"size":174,"mtime":1692316906224,"results":"150","hashOfConfig":"105"},{"size":1972,"mtime":1692316906225,"results":"151","hashOfConfig":"105"},{"size":6347,"mtime":1693719450068,"results":"152","hashOfConfig":"105"},{"size":1939,"mtime":1692324087153,"results":"153","hashOfConfig":"105"},{"size":4955,"mtime":1693719473891,"results":"154","hashOfConfig":"105"},{"size":804,"mtime":1693529415663,"results":"155","hashOfConfig":"105"},{"size":4155,"mtime":1693716127395,"results":"156","hashOfConfig":"105"},{"size":2134,"mtime":1693373505129,"results":"157","hashOfConfig":"105"},{"size":3050,"mtime":1693716697433,"results":"158","hashOfConfig":"105"},{"size":1939,"mtime":1693579376404,"results":"159","hashOfConfig":"105"},{"size":1544,"mtime":1693716127386,"results":"160","hashOfConfig":"105"},{"size":1602,"mtime":1693716127383,"results":"161","hashOfConfig":"105"},{"size":1180,"mtime":1693289870467,"results":"162","hashOfConfig":"105"},{"size":2981,"mtime":1693579376405,"results":"163","hashOfConfig":"105"},{"size":36081,"mtime":1693716127474,"results":"164","hashOfConfig":"105"},{"size":841,"mtime":1692316906210,"results":"165","hashOfConfig":"105"},{"size":2904,"mtime":1693385173692,"results":"166","hashOfConfig":"105"},{"size":2780,"mtime":1692697047611,"results":"167","hashOfConfig":"105"},{"size":1400,"mtime":1693185539146,"results":"168","hashOfConfig":"105"},{"size":6710,"mtime":1693716127466,"results":"169","hashOfConfig":"105"},{"size":3306,"mtime":1693716127355,"results":"170","hashOfConfig":"105"},{"size":2716,"mtime":1693716127322,"results":"171","hashOfConfig":"105"},{"size":2199,"mtime":1693185539151,"results":"172","hashOfConfig":"105"},{"size":1343,"mtime":1693579376393,"results":"173","hashOfConfig":"105"},{"size":2597,"mtime":1693716697438,"results":"174","hashOfConfig":"105"},{"size":1812,"mtime":1693716127367,"results":"175","hashOfConfig":"105"},{"size":5753,"mtime":1693716127311,"results":"176","hashOfConfig":"105"},{"size":5268,"mtime":1693716127330,"results":"177","hashOfConfig":"105"},{"size":1248,"mtime":1692795475698,"results":"178","hashOfConfig":"105"},{"size":8415,"mtime":1693716127408,"results":"179","hashOfConfig":"105"},{"size":1624,"mtime":1693579376398,"results":"180","hashOfConfig":"105"},{"size":366,"mtime":1693380447662,"results":"181","hashOfConfig":"105"},{"size":2257,"mtime":1693716127325,"results":"182","hashOfConfig":"105"},{"size":3948,"mtime":1692795475696,"results":"183","hashOfConfig":"105"},{"size":861,"mtime":1692697047626,"results":"184","hashOfConfig":"105"},{"size":1246,"mtime":1692795475701,"results":"185","hashOfConfig":"105"},{"size":5000,"mtime":1693719189330,"results":"186","hashOfConfig":"105"},{"size":3900,"mtime":1693716697546,"results":"187","hashOfConfig":"105"},{"size":6273,"mtime":1693716127340,"results":"188","hashOfConfig":"105"},{"size":810,"mtime":1692795475688,"results":"189","hashOfConfig":"105"},{"size":1599,"mtime":1693469448396,"results":"190","hashOfConfig":"105"},{"size":915,"mtime":1692697047620,"results":"191","hashOfConfig":"105"},{"size":3608,"mtime":1693717652827,"results":"192","hashOfConfig":"105"},{"size":1047,"mtime":1693019107190,"results":"193","hashOfConfig":"105"},{"size":1120,"mtime":1693487581013,"results":"194","hashOfConfig":"105"},{"size":2699,"mtime":1693019107191,"results":"195","hashOfConfig":"105"},{"size":1590,"mtime":1693469448393,"results":"196","hashOfConfig":"105"},{"size":1291,"mtime":1693016497915,"results":"197","hashOfConfig":"105"},{"size":2276,"mtime":1693716127461,"results":"198","hashOfConfig":"105"},{"size":556,"mtime":1693289870467,"results":"199","hashOfConfig":"105"},{"size":4779,"mtime":1693719161856,"results":"200","hashOfConfig":"105"},{"size":3615,"mtime":1693716697508,"results":"201","hashOfConfig":"105"},{"size":1272,"mtime":1693579376386,"results":"202","hashOfConfig":"105"},{"size":3436,"mtime":1693716127446,"results":"203","hashOfConfig":"105"},{"size":794,"mtime":1693719425201,"results":"204","hashOfConfig":"105"},{"size":869,"mtime":1693308869758,"results":"205","hashOfConfig":"105"},{"size":466,"mtime":1693364825626,"results":"206","hashOfConfig":"105"},{"size":743,"mtime":1693364825625,"results":"207","hashOfConfig":"105"},{"size":838,"mtime":1693717323724,"results":"208","hashOfConfig":"105"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2hfnq5",{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","suppressedMessages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247"},{"filePath":"248","messages":"249","suppressedMessages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10r5akg",{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","suppressedMessages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","suppressedMessages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","suppressedMessages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","suppressedMessages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","suppressedMessages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","suppressedMessages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","suppressedMessages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367"},{"filePath":"368","messages":"369","suppressedMessages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","suppressedMessages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374"},{"filePath":"375","messages":"376","suppressedMessages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","suppressedMessages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","suppressedMessages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","suppressedMessages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","suppressedMessages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","suppressedMessages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","suppressedMessages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","suppressedMessages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"414","messages":"415","suppressedMessages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","suppressedMessages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420"},{"filePath":"421","messages":"422","suppressedMessages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","suppressedMessages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430"},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","suppressedMessages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","suppressedMessages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","suppressedMessages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","suppressedMessages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449"},{"filePath":"450","messages":"451","suppressedMessages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453"},{"filePath":"454","messages":"455","suppressedMessages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","suppressedMessages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466"},{"filePath":"467","messages":"468","suppressedMessages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","suppressedMessages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","suppressedMessages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","suppressedMessages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","suppressedMessages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","suppressedMessages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","suppressedMessages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","suppressedMessages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","suppressedMessages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","suppressedMessages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500"},{"filePath":"501","messages":"502","suppressedMessages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","suppressedMessages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"507","messages":"508","suppressedMessages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","suppressedMessages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","suppressedMessages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","suppressedMessages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","suppressedMessages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","suppressedMessages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","suppressedMessages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"528","messages":"529","suppressedMessages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\auth\\SignIn.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\auth\\SignUp.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\index.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\post\\Write.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\_app.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\_document.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ContentArea.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\Dropzone.tsx",["531"],[],"import { useDropzone } from 'react-dropzone';\r\nimport NextImage from 'next/image';\r\nimport { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport useModal from '@/hooks/useModal';\r\nimport Modal from '../common/Modal';\r\nimport { DropzoneIcon } from '../common/SVG';\r\n\r\ninterface DropzoneProps {\r\n  images: File[];\r\n  setImages: (images: any) => void;\r\n  imageURLs: string[];\r\n  setImageURLs: (imageURLs: any) => void;\r\n}\r\n\r\nconst MAX_IMAGES = 5;\r\n\r\nconst DropContainer = styled.div`\r\n  height: 200px;\r\n  width: 100%;\r\n  padding: 12px;\r\n  border: 2px dashed var(--primary-color);\r\n  /* border-radius: 12px; */\r\n  /* background-color: var(--input-bg-color); */\r\n  border-radius: 4px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  overflow: hidden;\r\n  color: var(--color);\r\n  text-align: center;\r\n  font-size: 8px;\r\n  .bold {\r\n    font-size: 16px;\r\n    font-weight: 700;\r\n    margin: 12px 0 8px;\r\n  }\r\n  img.upload {\r\n    position: absolute;\r\n    width: auto;\r\n    height: 90%;\r\n    object-fit: contain;\r\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nconst Dropzone: React.FC<DropzoneProps> = ({\r\n  images,\r\n  setImages,\r\n  imageURLs,\r\n  setImageURLs,\r\n}) => {\r\n  const { isModalOpen, modalMessge, openModal, closeModal } = useModal();\r\n\r\n  const resizeImage = (imageFile: File, callback: (file: File) => void) => {\r\n    const MAX_SIZE = 5 * 1024 * 1024; // 5MB\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(imageFile);\r\n    reader.onload = (event) => {\r\n      const img = new window.Image();\r\n      if (typeof reader.result === 'string') {\r\n        img.src = reader.result;\r\n      }\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        if (ctx) {\r\n          ctx.drawImage(img, 0, 0);\r\n        }\r\n\r\n        let quality = 0.8; // start with 0.8\r\n        let dataUrl;\r\n\r\n        // Keep reducing quality until the size is below 5MB or quality goes too low\r\n        do {\r\n          dataUrl = canvas.toDataURL('image/jpeg', quality);\r\n          quality -= 0.1;\r\n        } while (dataUrl.length * 0.75 > MAX_SIZE && quality > 0.2);\r\n\r\n        if (dataUrl.length * 0.75 > MAX_SIZE) {\r\n          // If the size is still above 5MB after all reductions, return an error or handle as you wish\r\n          openModal({\r\n            actionText: '확인',\r\n            modalMessge: '이미지 크기를 5MB 미만으로 줄일 수 없습니다.',\r\n          });\r\n          return;\r\n        }\r\n\r\n        const byteString = atob(dataUrl.split(',')[1]);\r\n        const ab = new ArrayBuffer(byteString.length);\r\n        const ia = new Uint8Array(ab);\r\n        for (let i = 0; i < byteString.length; i++) {\r\n          ia[i] = byteString.charCodeAt(i);\r\n        }\r\n        const blob = new Blob([ab], { type: 'image/jpeg' });\r\n\r\n        const newFileName = `${imageFile.name\r\n          .split('.')\r\n          .slice(0, -1)\r\n          .join('.')}.jpg`;\r\n        callback(new File([blob], newFileName, { type: 'image/jpg' }));\r\n      };\r\n    };\r\n  };\r\n\r\n  const onDrop = useCallback(\r\n    (acceptedFiles: File[]) => {\r\n      if (acceptedFiles.length + images.length > MAX_IMAGES) {\r\n        openModal({\r\n          actionText: '확인',\r\n          modalMessge: '업로드 이미지는 최대 5장 입니다.',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // 이미지 리사이징\r\n      Promise.all(\r\n        acceptedFiles.map((file) => {\r\n          return new Promise<{ resizedFile: File }>((resolve) => {\r\n            resizeImage(file, (resizedFile) => {\r\n              resolve({ resizedFile });\r\n            });\r\n          });\r\n        })\r\n      ).then((results) => {\r\n        // 리사이징된 파일을 images와 imageURLs 상태에 추가\r\n        setImages([...images, ...results.map((result) => result.resizedFile)]);\r\n        const newImageURLs = results.map((result) =>\r\n          URL.createObjectURL(result.resizedFile)\r\n        );\r\n        setImageURLs([...imageURLs, ...newImageURLs]);\r\n\r\n        // 각 파일의 크기 출력\r\n        results.forEach((result) => {\r\n          console.log(`File Name: ${result.resizedFile.name}`);\r\n        });\r\n      });\r\n    },\r\n    [images, imageURLs, setImages, setImageURLs]\r\n  );\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <>\r\n      {isModalOpen && (\r\n        <Modal\r\n          isOpen={isModalOpen}\r\n          setIsOpen={closeModal}\r\n          actionText={modalMessge.actionText}\r\n          onClickEvent={modalMessge.onClickEvent || null}\r\n        >\r\n          {modalMessge.modalMessge}\r\n        </Modal>\r\n      )}\r\n      <DropContainer {...getRootProps()}>\r\n        <input {...getInputProps()} />\r\n        {imageURLs[4] ? (\r\n          <>\r\n            <NextImage\r\n              src={imageURLs[0]}\r\n              alt={`Upload preview 1`}\r\n              width={100}\r\n              height={100}\r\n              className=\"upload\"\r\n            />\r\n          </>\r\n        ) : isDragActive ? (\r\n          <>\r\n            <DropzoneIcon />\r\n            <p className=\"bold\">이미지를 드래그앤 드랍 해주세요.</p>\r\n          </>\r\n        ) : imageURLs[0] ? (\r\n          <>\r\n            <DropzoneIcon />\r\n            <p className=\"bold\">이미지를 추가로 등록할 수 있습니다.</p>\r\n            <p>\r\n              jpg,png 형식의 파일로 <br /> 5개까지 업로드 하실 수 있습니다.\r\n            </p>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <DropzoneIcon />\r\n            <p className=\"bold\">이미지 업로드</p>\r\n            <p>\r\n              jpg,png 형식의 파일로 <br /> 5개까지 업로드 하실 수 있습니다.\r\n            </p>\r\n          </>\r\n        )}\r\n      </DropContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ImagePreview.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\MapComponent.tsx",["532"],[],"import React, { useCallback, useMemo, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport Script from 'next/script';\r\nimport { InputBox } from '@/styles/write';\r\nimport styled from 'styled-components';\r\nimport { debounce } from 'lodash';\r\nimport Button from '../common/Button';\r\nimport nookies from 'nookies';\r\nimport Modal from '../common/Modal';\r\nimport useModal from '@/hooks/useModal';\r\nimport {\r\n  CustomSelect,\r\n  DropdownIcon,\r\n  InputContainer,\r\n  OptionItem,\r\n  OptionsContainer,\r\n  SelectContainer,\r\n} from '@/styles/detail';\r\n\r\nconst SuggestionsBox = styled.ul`\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 100%;\r\n  box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.2);\r\n  border-radius: 0 0 4px 4px;\r\n  overflow: hidden;\r\n  text-align: left;\r\n`;\r\n\r\nconst SuggestionItem = styled.li`\r\n  padding: 10px;\r\n  background-color: var(--bg-color);\r\n  border-bottom: 1px solid #f1f1f1;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: #f1f1f1;\r\n  }\r\n  &:last-child {\r\n    border-bottom: none;\r\n  }\r\n`;\r\n\r\ninterface Location {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface MapClickEvent {\r\n  coord: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n}\r\n\r\ninterface Marker {\r\n  setMap: (map: any | null) => void;\r\n}\r\n\r\ninterface MapComponentProps {\r\n  setLocation: React.Dispatch<React.SetStateAction<Location>>;\r\n  location: Location;\r\n  update: string;\r\n  setIsShowMap: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    naver: {\r\n      maps: {\r\n        Map: any;\r\n        Event: {\r\n          addListener: (\r\n            instance: any,\r\n            eventName: string,\r\n            handler: (...args: any[]) => void\r\n          ) => void;\r\n        };\r\n        Marker: any;\r\n        LatLng: any;\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 10px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 20px;\r\n  color: #888;\r\n`;\r\n\r\nexport const MapComponent: React.FC<MapComponentProps> = ({\r\n  setLocation,\r\n  location,\r\n  update,\r\n  setIsShowMap,\r\n}) => {\r\n  const { isModalOpen, modalMessge, openModal, closeModal } = useModal();\r\n  const [mapOpen, setMapOpen] = useState(false);\r\n  const [locationInput, setLocationInput] = useState('');\r\n  const [locationLatLng, setLocationLatLng] = useState({ x: 0, y: 0 });\r\n  const [suggestions, setSuggestions] = useState<any[]>([]);\r\n  const mapContainerRef = useRef(null);\r\n  const mapRef = useRef<any>(null);\r\n  const markerRef = useRef<Marker | null>(null);\r\n  const options = ['도로명', '지번'];\r\n  const [selectedOption, setSelectedOption] = useState(options[0]);\r\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\r\n\r\n  const handleMapClick = useCallback(\r\n    async (event: MapClickEvent) => {\r\n      const coord = event.coord;\r\n      if (update === '3') return;\r\n      setLocationLatLng({ x: coord.x, y: coord.y });\r\n\r\n      if (markerRef.current) {\r\n        markerRef.current.setMap(null);\r\n      }\r\n\r\n      markerRef.current = new window.naver.maps.Marker({\r\n        position: new window.naver.maps.LatLng(coord.y, coord.x),\r\n        map: mapRef.current,\r\n      });\r\n    },\r\n    [update, setLocationLatLng]\r\n  );\r\n\r\n  const handleSearch = useCallback(\r\n    async (term: string) => {\r\n      if (term.length < 1) return;\r\n\r\n      try {\r\n        const response = await axios.get(\r\n          `${process.env.NEXT_PUBLIC_LOCAL_SERVER}/api/util/map/geocode`,\r\n          {\r\n            params: {\r\n              query: term,\r\n            },\r\n          }\r\n        );\r\n\r\n        // console.log(response.data);\r\n\r\n        const suggestions = response.data.addressInfo.map((info: any) => {\r\n          let address_name;\r\n\r\n          switch (selectedOption) {\r\n            case '지번':\r\n              address_name = info.address_name;\r\n              break;\r\n            case '도로명':\r\n              address_name = info.road_address_name;\r\n              break;\r\n            default:\r\n              address_name = info.address_name; // Default to 지번 if anything goes wrong\r\n          }\r\n\r\n          return {\r\n            address_name,\r\n            x: info.x,\r\n            y: info.y,\r\n          };\r\n        });\r\n\r\n        setSuggestions(suggestions);\r\n      } catch (error) {\r\n        // console.error('Geocode API 호출 중 오류가 발생했습니다:', error);\r\n      }\r\n    },\r\n    [selectedOption]\r\n  );\r\n\r\n  const debouncedSearch = useMemo(\r\n    () => debounce(handleSearch, 10),\r\n    [handleSearch]\r\n  );\r\n\r\n  const handleKeyUp = useCallback(\r\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n      const value = event.currentTarget.value;\r\n      if (value.trim() === '') {\r\n        setSuggestions([]);\r\n      } else {\r\n        debouncedSearch(value);\r\n      }\r\n    },\r\n    [debouncedSearch]\r\n  );\r\n\r\n  const handleSuggestionClick = useCallback(\r\n    (suggestion: any) => {\r\n      setLocationInput(suggestion.address_name);\r\n      setSuggestions([]);\r\n      // x, y 좌표를 기반으로 지도의 중심을 설정합니다.\r\n      const newPosition = new window.naver.maps.LatLng(\r\n        suggestion.y,\r\n        suggestion.x\r\n      );\r\n\r\n      // 지도가 아직 초기화되지 않았다면, 중심 좌표와 마커를 설정합니다.\r\n      if (mapRef.current) {\r\n        mapRef.current.setCenter(newPosition);\r\n        mapRef.current.setZoom(18);\r\n\r\n        if (markerRef.current) {\r\n          markerRef.current.setMap(null);\r\n        }\r\n\r\n        // 해당 위치에 마커를 찍습니다.\r\n        markerRef.current = new window.naver.maps.Marker({\r\n          position: newPosition,\r\n          map: mapRef.current,\r\n        });\r\n      }\r\n\r\n      // 지도를 펼칩니다.\r\n      setLocationLatLng({ y: suggestion.y, x: suggestion.x });\r\n      setMapOpen(true);\r\n    },\r\n    [setMapOpen]\r\n  );\r\n\r\n  const initializeMap = () => {\r\n    if (mapContainerRef.current) {\r\n      mapRef.current = new window.naver.maps.Map(mapContainerRef.current, {\r\n        center: new window.naver.maps.LatLng(37.5665, 126.978), // 기본 위치\r\n        zoom: 15,\r\n      });\r\n\r\n      window.naver.maps.Event.addListener(\r\n        mapRef.current,\r\n        'click',\r\n        handleMapClick\r\n      );\r\n    }\r\n  };\r\n\r\n  const submitLocation = () => {\r\n    setLocation({\r\n      name: locationInput,\r\n      x: locationLatLng.x,\r\n      y: locationLatLng.y,\r\n    });\r\n    setIsShowMap(false);\r\n  };\r\n\r\n  const onClickCloseHandler = () => {\r\n    setIsShowMap(false);\r\n  };\r\n\r\n  const setToCurrentLocation = useCallback(() => {\r\n    const { currentlocation } = nookies.get();\r\n\r\n    if (!currentlocation) {\r\n      openModal({\r\n        actionText: '확인',\r\n        modalMessge:\r\n          '위치정보 탐색을 허용하지 않았을경우 브라우저 상단의 위치정보 사용을 허용해주세요.',\r\n      });\r\n    }\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        nookies.set(null, 'currentlocation', 'true', { path: '/' });\r\n        const { latitude, longitude } = position.coords;\r\n        setLocationInput('내 위치');\r\n        setMapOpen(true);\r\n\r\n        if (mapRef.current) {\r\n          const newPosition = new window.naver.maps.LatLng(latitude, longitude);\r\n          mapRef.current.setCenter(newPosition);\r\n          mapRef.current.setZoom(18);\r\n\r\n          if (markerRef.current) {\r\n            markerRef.current.setMap(null);\r\n          }\r\n\r\n          markerRef.current = new window.naver.maps.Marker({\r\n            position: newPosition,\r\n            map: mapRef.current,\r\n          });\r\n        }\r\n\r\n        setLocationLatLng({ y: latitude, x: longitude });\r\n      },\r\n      async (error) => {\r\n        if (error.code === error.PERMISSION_DENIED) {\r\n          openModal({\r\n            actionText: '확인',\r\n            modalMessge:\r\n              '이 기능을 사용하려면 브라우저 설정에서 위치 권한을 허용한후 브라우저를 재부팅 해주세요.',\r\n          });\r\n        } else {\r\n          // console.error('지금 위치를 찾을 수 없습니다.', error);\r\n        }\r\n      }\r\n    );\r\n  }, [setMapOpen]);\r\n\r\n  const handleOptionChange = (option: string) => {\r\n    setSelectedOption(option);\r\n    setLocationInput(''); // 인풋 값을 초기화합니다.\r\n    toggleOptions();\r\n  };\r\n\r\n  const toggleOptions = () => {\r\n    setIsOptionsOpen((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isModalOpen && (\r\n        <Modal\r\n          isOpen={isModalOpen}\r\n          setIsOpen={closeModal}\r\n          actionText={modalMessge.actionText}\r\n          onClickEvent={modalMessge.onClickEvent || null}\r\n        >\r\n          {modalMessge.modalMessge}\r\n        </Modal>\r\n      )}\r\n      <Script\r\n        strategy=\"afterInteractive\"\r\n        type=\"text/javascript\"\r\n        src={`https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${process.env.NEXT_PUBLIC_NAVERMAP_API_KEY}`}\r\n        onReady={() => initializeMap()}\r\n      />\r\n      <h3 style={{ margin: '10px 0' }}>장소</h3>\r\n      <InputContainer>\r\n        {/* <label>\r\n          <Mappin />\r\n        </label> */}\r\n        <InputBox\r\n          type=\"text\"\r\n          placeholder=\"장소를 입력해주세요\"\r\n          value={locationInput}\r\n          onChange={(e) => setLocationInput(e.target.value)}\r\n          onKeyUp={handleKeyUp}\r\n          style={{\r\n            paddingLeft: '100px',\r\n          }}\r\n        />\r\n        <SelectContainer>\r\n          <CustomSelect onClick={toggleOptions}>{selectedOption}</CustomSelect>\r\n          <DropdownIcon onClick={toggleOptions}>▼</DropdownIcon>\r\n          {isOptionsOpen && (\r\n            <OptionsContainer>\r\n              {options.map(\r\n                (option) =>\r\n                  option !== selectedOption && ( // 현재 선택된 옵션은 리스트에 나타나지 않게\r\n                    <OptionItem\r\n                      key={option}\r\n                      onClick={() => handleOptionChange(option)}\r\n                    >\r\n                      {option}\r\n                    </OptionItem>\r\n                  )\r\n              )}\r\n            </OptionsContainer>\r\n          )}\r\n        </SelectContainer>\r\n      </InputContainer>\r\n      <div\r\n        style={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          height: '40vh',\r\n          margin: '20px 0',\r\n        }}\r\n      >\r\n        {suggestions.length > 0 && (\r\n          <SuggestionsBox\r\n            style={{\r\n              position: 'absolute',\r\n              zIndex: 1, // 맵 위로 올리기\r\n            }}\r\n          >\r\n            {suggestions.map((suggestion, index) => (\r\n              <SuggestionItem\r\n                key={index}\r\n                onClick={() => handleSuggestionClick(suggestion)}\r\n              >\r\n                {suggestion.address_name}\r\n              </SuggestionItem>\r\n            ))}\r\n          </SuggestionsBox>\r\n        )}\r\n        <div\r\n          ref={mapContainerRef}\r\n          id=\"map\"\r\n          style={{ width: '100%', height: '100%' }}\r\n        />\r\n      </div>\r\n      <div style={{ display: 'flex', gap: '20px' }}>\r\n        {/* <Button\r\n          type=\"button\"\r\n          className=\"secondary\"\r\n          onClick={onClickCloseHandler}\r\n        >\r\n          닫기\r\n        </Button> */}\r\n        <Button\r\n          onClick={submitLocation}\r\n          type=\"button\"\r\n          className={!mapOpen ? 'secondary' : undefined}\r\n        >\r\n          확인\r\n        </Button>\r\n        <Button type=\"button\" onClick={setToCurrentLocation}>\r\n          간편 찾기\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\Tag.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\TagInput.tsx",["533"],[],"import { InputBox, InputContainer, LimitNumBox, TagBox } from '@/styles/write';\r\nimport React, { KeyboardEvent, useCallback, useState } from 'react';\r\nimport Tag from './Tag';\r\nimport useModal from '@/hooks/useModal';\r\nimport Modal from '@/components/common/Modal';\r\n\r\ninterface TagInputProps {\r\n  tags: string[];\r\n  setTags: (tags: string[]) => void;\r\n}\r\n\r\nconst MAX_TAGS = 5;\r\n\r\nconst TagInput: React.FC<TagInputProps> = ({ tags, setTags }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const { isModalOpen, modalMessge, openModal, closeModal } = useModal();\r\n  const [isMaxLength, setIsMaxLength] = useState<boolean>(false);\r\n\r\n  const handleDelete = useCallback(\r\n    (tagToDelete: string) => {\r\n      setTags(tags.filter((tag) => tag !== tagToDelete));\r\n    },\r\n    [tags, setTags]\r\n  );\r\n\r\n  const handleTagChange = useCallback(\r\n    (e: KeyboardEvent<HTMLInputElement>) => {\r\n      if (e.key === 'Enter' || e.key === ' ') {\r\n        e.preventDefault();\r\n\r\n        const newTag = e.currentTarget.value.trim();\r\n        const hasSpecialCharacters =\r\n          /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/.test(newTag);\r\n        if (hasSpecialCharacters) {\r\n          openModal({\r\n            actionText: '확인',\r\n            modalMessge: '해시태그에는 특수문자를 사용할 수 없습니다!',\r\n          });\r\n          return;\r\n        }\r\n        if (newTag === '전체' || newTag === '기타') {\r\n          openModal({\r\n            actionText: '확인',\r\n            modalMessge: '해시태그에 \"전체\" 또는 \"기타\"를 사용할 수 없습니다!',\r\n          });\r\n          return;\r\n        }\r\n        if (newTag && !tags.includes(newTag)) {\r\n          if (newTag.length > 5) {\r\n            openModal({\r\n              actionText: '확인',\r\n              modalMessge: '해시태그는 5글자를 넘길 수 없습니다!',\r\n            });\r\n            return;\r\n          }\r\n\r\n          if (newTag.length < 2) {\r\n            openModal({\r\n              actionText: '확인',\r\n              modalMessge: '해시태그는 최소 2글자 이상 이어야 합니다!',\r\n            });\r\n            return;\r\n          }\r\n\r\n          if (tags.length >= MAX_TAGS) {\r\n            setIsMaxLength(true);\r\n            openModal({\r\n              actionText: '확인',\r\n              modalMessge: `태그는 최대 ${MAX_TAGS}까지 업로드할 수 있습니다.`,\r\n            });\r\n            return;\r\n          } else {\r\n            setIsMaxLength(false);\r\n          }\r\n\r\n          setTags([...tags, newTag]);\r\n          setInputValue('');\r\n        }\r\n      }\r\n    },\r\n    [tags, setTags]\r\n  );\r\n\r\n  const isMaxTags = tags.length >= MAX_TAGS;\r\n\r\n  return (\r\n    <>\r\n      <InputContainer>\r\n        <label>태그</label>\r\n        <InputBox\r\n          type=\"text\"\r\n          placeholder=\"태그를 입력해주세요\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          onKeyUp={handleTagChange}\r\n          disabled={isMaxTags}\r\n        />\r\n        <LimitNumBox $color={isMaxTags}>\r\n          {tags.length}/{MAX_TAGS}\r\n        </LimitNumBox>\r\n      </InputContainer>\r\n      <p className=\"small\">태그 입력후 ENTER or SPACE 를 눌러주세요!</p>\r\n      <TagBox>\r\n        {tags.map((tag, index) => (\r\n          <Tag key={index} tag={tag} onDelete={handleDelete} />\r\n        ))}\r\n      </TagBox>\r\n      {isModalOpen && (\r\n        <Modal\r\n          isOpen={isModalOpen}\r\n          setIsOpen={closeModal}\r\n          actionText={modalMessge.actionText}\r\n          onClickEvent={modalMessge.onClickEvent || null}\r\n        >\r\n          {modalMessge.modalMessge}\r\n        </Modal>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TagInput;\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\YoutubePlayer.tsx",["534"],[],"import { InputBox, RecordButtonBox } from '@/styles/write';\r\nimport { CloseButton, PlayerWrapper } from '@/styles/youtubeplayer';\r\nimport Script from 'next/script';\r\nimport React, { FormEvent, useEffect, useRef, useState } from 'react';\r\nimport Button from '../common/Button';\r\nimport { Xmark } from '../common/SVG';\r\nimport { YouTubeSearch } from './YoutubeSearchInput';\r\n\r\ninterface YoutubePlayerProps {\r\n  videoId: string;\r\n  setVideoId: React.Dispatch<React.SetStateAction<string>>;\r\n  setSelectedTitle: React.Dispatch<React.SetStateAction<string>>;\r\n  setAudioSubmit: React.Dispatch<React.SetStateAction<boolean>>;\r\n  update: string;\r\n}\r\n\r\ninterface Windows extends Window {\r\n  onYouTubeIframeAPIReady: () => void;\r\n}\r\n\r\nconst YoutubePlayer = ({\r\n  videoId,\r\n  setVideoId,\r\n  setSelectedTitle,\r\n  setAudioSubmit,\r\n  update,\r\n}: YoutubePlayerProps) => {\r\n  const [intervalId, setIntervalId] = useState<NodeJS.Timeout | null>(null);\r\n  const [player, setPlayer] = useState<YT.Player | null>(null);\r\n  const playerRef = useRef<HTMLDivElement | null>(null);\r\n  const [playing, setPlaying] = useState(false);\r\n  const [seek, setSeek] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [title, setTitle] = useState<string | null>(null);\r\n  const [inputURL, setInputURL] = useState(''); // 입력된 URL을 추적\r\n  const [validURL, setValidURL] = useState(true); // URL 유효성을 추적\r\n\r\n  // URL 유효성 검사 함수\r\n  const handleURLValidation = () => {\r\n    setValidURL(true);\r\n    try {\r\n      const url = new URL(inputURL);\r\n      const videoIdParam = url.searchParams.get('v');\r\n      if (videoIdParam) {\r\n        setVideoId(inputURL); // 일단 영상 ID를 설정\r\n        //setAudioSubmit(true);\r\n        // setValidURL(true); // 여기에서는 유효성을 설정하지 않습니다.\r\n      } else {\r\n        throw new Error('Invalid URL');\r\n      }\r\n    } catch (error) {\r\n      setValidURL(false);\r\n    }\r\n  };\r\n\r\n  const handleClosePlayer = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    if (intervalId) {\r\n      clearInterval(intervalId); // 인터벌 종료\r\n    }\r\n    setAudioSubmit(false);\r\n    setVideoId(''); // 비디오 ID를 지워 플레이어를 닫습니다.\r\n    setTitle('');\r\n    setSelectedTitle('');\r\n    setSeek(0);\r\n    setDuration(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    function createPlayer() {\r\n      if (!videoId && player) {\r\n        player.destroy();\r\n        setPlayer(null);\r\n      }\r\n      if (videoId && !player && playerRef.current) {\r\n        const url = new URL(videoId);\r\n        const videoIdParam = url.searchParams.get('v');\r\n        if (videoIdParam) {\r\n          const newPlayer = new YT.Player(playerRef.current, {\r\n            videoId: videoIdParam,\r\n            height: '150',\r\n            width: '400',\r\n            playerVars: {\r\n              autoplay: 1,\r\n            },\r\n            events: {\r\n              onReady: (event) => {\r\n                const playerInstance = event.target;\r\n                setTitle(playerInstance.getVideoData().title);\r\n                setPlayer(playerInstance);\r\n              },\r\n              onStateChange: (event) => {\r\n                if (event.data === YT.PlayerState.PLAYING) {\r\n                  setAudioSubmit(true);\r\n                  setPlaying(true);\r\n                } else if (event.data === YT.PlayerState.PAUSED) {\r\n                  setPlaying(false);\r\n                } else if (event.data === YT.PlayerState.ENDED) {\r\n                  setPlaying(false);\r\n                  setSeek(duration); // 플레이가 종료되면 Seek을 duration으로 설정\r\n                }\r\n              },\r\n              onError: (event) => {\r\n                if ([2, 5, 100, 101, 150].includes(event.data)) {\r\n                  setValidURL(false); // 여기에서 비디오의 유효성을 다시 검사\r\n                  setAudioSubmit(false);\r\n                  if (intervalId) {\r\n                    clearInterval(intervalId);\r\n                  }\r\n                  setVideoId('');\r\n                  setTitle('');\r\n                  setSelectedTitle('');\r\n                  setSeek(0);\r\n                  setDuration(0);\r\n                }\r\n              },\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n      if ('YT' in window) {\r\n        createPlayer();\r\n      } else {\r\n        (window as Windows).onYouTubeIframeAPIReady = () => {\r\n          createPlayer();\r\n        };\r\n      }\r\n    }\r\n  }, [videoId, player]);\r\n\r\n  return (\r\n    <RecordButtonBox>\r\n      <InputBox\r\n        type=\"text\"\r\n        placeholder=\"YouTube URL로 공유하기\"\r\n        value={inputURL}\r\n        onChange={(e) => setInputURL(e.target.value)}\r\n      />\r\n      <YouTubeSearch\r\n        setVideoId={setVideoId}\r\n        setSelectedTitle={setSelectedTitle}\r\n        update={update}\r\n        videoId={videoId}\r\n      />\r\n      {!validURL && <div>URL이 유효하지 않습니다.</div>}\r\n      <PlayerWrapper videoId={videoId}>\r\n        {update !== '3' && (\r\n          <CloseButton onClick={handleClosePlayer}>\r\n            <Xmark />\r\n          </CloseButton>\r\n        )}\r\n        <div id=\"player\" ref={playerRef} />\r\n        <Script src=\"https://www.youtube.com/iframe_api\" />\r\n      </PlayerWrapper>\r\n      {videoId ? (\r\n        <Button type=\"button\" onClick={handleClosePlayer}>\r\n          취소\r\n        </Button>\r\n      ) : (\r\n        <Button type=\"button\" onClick={handleURLValidation}>\r\n          확인\r\n        </Button>\r\n      )}\r\n      {/* <Button type=\"button\" onClick={handleURLValidation}>\r\n        확인\r\n      </Button> */}\r\n    </RecordButtonBox>\r\n  );\r\n};\r\n\r\nexport default YoutubePlayer;\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\YoutubeSearchInput.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SignInUi.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SocialLogIn.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SingUpUi.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\PostLike.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\UserLikePostSuggestion.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\UserProfileCard.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\UserUi.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\Footer.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\Header.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\MobileBottomNav.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Common\\SideNav.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\HashtagContents.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\HashtagNavBar.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\ImageContent.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Footer.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Header.tsx",["535"],[],"import React, { useEffect, useState } from 'react';\nimport SideNav from './SideNav';\nimport Link from 'next/link';\nimport { AccountActionsContainer, HeaderLayout, LogoBox, MobileBox, ProfileButton } from '@/styles/header';\nimport IconButton from './IconButton';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { TOGGLE_PUSH, UserState } from '@/redux/reducers/userSlice';\nimport { Bell, Cloud } from '@/components/common/SVG';\nimport { setCookie } from 'nookies';\nimport ProfileImage from '@/components/common/ProfileImage';\nimport { RootState } from '@/redux/config/configStore';\nimport Modal from './Modal';\n\nconst ENDPOINT = `${process.env.NEXT_PUBLIC_LOCAL_SERVER}`;\n\nconst Header = ({ $sticky, ...restProps }: any) => {\n  const { user }: { user: UserState['user'] } = useSelector(\n    (state: RootState) => state.user\n  );\n  const router = useRouter();\n  const dispatch = useDispatch();\n\n  const isTrend = router.pathname === '/';\n  const isFeed = router.pathname === '/feed';\n  const isSearch = router.pathname === '/search';\n  const isWrite = router.pathname === '/post/Write';\n  const [isShowMenu, setIsShowMenu] = useState<boolean>(false);\n  const BellColor = () => {\n    if (isTrend) {\n      return $sticky ? 'var(--primary-color)' : '#fff';\n    } else {\n      return '#2797FF';\n    }\n  };\n\n  const [isAuth, setIsAuth] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [modalMessge, setModalMessge] = useState<any>({\n    actionText: '',\n    modalMessge: '',\n    onClickEvent: '',\n  });\n  const onClickShowMenuHandler = () => {\n    router.push(`/User/${user.email}`);\n  };\n\n  const handleLogoClick = () => {\n    router.push('/');\n  };\n  const LoginHandler = () => {\n    setModalMessge({\n      actionText: '확인',\n      modalMessge: '로그인이 필요한 서비스입니다. 로그인 하시겠습니까?',\n      onClickEvent: () => router.push('/auth/SignIn'),\n    });\n    setIsOpen(!isOpen);\n  };\n  const goToWritePage = () => {\n    setCookie(null, 'update', '1', { path: '/' });\n    setCookie(null, 'updateId', '0', { path: '/' });\n    router.push('/post/Write'); // 글쓰기 페이지로 이동\n  };\n\n  useEffect(() => {\n    if (user.email !== null) {\n      setIsAuth(true);\n    } else {\n      setIsAuth(false);\n    }\n  }, [user.email]);\n\n  // Notification permission 요청\n  function requestNotificationPermission() {\n    // Check if the window object is defined to ensure running on client side\n    if (typeof window !== 'undefined' && 'Notification' in window) {\n      Notification.requestPermission().then((permission) => {\n        if (permission === 'granted') {\n          subscribeUserToPush(); // 권한이 허용되면 Push Subscription 생성\n        } else {\n          // console.error('Notification permission denied.');\n        }\n      });\n    }\n  }\n\n  function checkNotificationPermission() {\n    if (typeof window !== 'undefined' && 'Notification' in window) {\n      if (Notification.permission === 'default') {\n        // 권한 요청이 아직 안된 상태\n        requestNotificationPermission();\n      }\n    }\n  }\n\n  // Push Subscription 생성\n  async function subscribeUserToPush() {\n    const registration = await navigator.serviceWorker.ready;\n\n    const subscribeOptions = {\n      userVisibleOnly: true,\n      applicationServerKey: process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY,\n    };\n\n    const pushSubscription =\n      await registration.pushManager.subscribe(subscribeOptions);\n\n    // 서버에 Push Subscription 저장\n    await fetch(`${ENDPOINT}/api/util/subscribe`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(pushSubscription),\n      credentials: 'include',\n    });\n  }\n\n  // 예시로, 앱이 로드될 때 알림 권한 요청\n  useEffect(() => {\n    if (user.email !== null) requestNotificationPermission();\n  }, []);\n\n  useEffect(() => {\n    if (user.email !== null) subscribeUserToPush();\n  }, [user.email]);\n\n  const [token, setToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    setToken(localStorage.getItem('token'));\n  }, []);\n\n  const clickBell = async () => {\n    await fetch(`${ENDPOINT}/api/util/togglepush`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n    });\n    dispatch(TOGGLE_PUSH());\n  };\n\n  return (\n    <>\n      <HeaderLayout $sticky={$sticky} {...restProps}>\n        <div className=\"center\">\n          <LogoBox href={'/'} onClick={handleLogoClick} $sticky={$sticky}>\n            <h1>HAPOOM</h1>\n          </LogoBox>\n          <AccountActionsContainer>\n            <Link\n              href={'/search'}\n              className={isSearch ? 'active search' : ' search'}\n            >\n              {/* <SearchIcon fillColor={$sticky ? '#fff' : '#9acfff'} /> */}\n              검색\n            </Link>\n            |\n            <button\n              onClick={!token ? LoginHandler : goToWritePage}\n              className={isWrite ? 'active edit' : ' edit'}\n            >\n              글쓰기\n              {/* <EditIcon fillColor={$sticky ? '#fff' : '#9acfff'} /> */}\n            </button>\n            |\n            <Link href={'/'} className={isTrend ? 'active' : ''}>\n              트렌드\n            </Link>\n            |\n            <Link href={'/feed'} className={isFeed ? 'active' : ''}>\n              피드\n            </Link>\n            |\n            {!token ? (\n              <>\n                {/* <AuthButtonBox> */}\n                <Link href={'/auth/SignIn'}>로그인</Link>|\n                <Link href={'/auth/SignUp'}>회원가입</Link>\n                {/* </AuthButtonBox> */}\n                <ProfileButton onClick={LoginHandler} $sticky={$sticky}>\n                  <Cloud />\n                </ProfileButton>\n              </>\n            ) : (\n              <>\n                <IconButton onClick={clickBell} $noneEdge={true}>\n                  <Bell fillColor={BellColor()} $isPush={user?.push} />\n                </IconButton>\n                <ProfileButton\n                  onClick={onClickShowMenuHandler}\n                  $sticky={$sticky}\n                >\n                  <ProfileImage\n                    preset={user?.preset || 5}\n                    userImage={user?.userImage || ''}\n                    loading=\"eager\"\n                  />\n                </ProfileButton>\n              </>\n            )}\n          </AccountActionsContainer>\n          <MobileBox>\n            <IconButton onClick={clickBell}>\n              <Bell fillColor={BellColor()} $isPush={user?.push} />\n            </IconButton>\n          </MobileBox>\n        </div>\n      </HeaderLayout>\n      {/* <GoWriteLink onClick={goToWritePage} href={'/post/Write'}>\n        <EditIcon />\n      </GoWriteLink> */}\n      {isShowMenu && (\n        <SideNav setIsShowMenu={setIsShowMenu} isShowMenu={isShowMenu} />\n      )}\n      <Modal\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n        actionText={modalMessge.actionText}\n        onClickEvent={modalMessge.onClickEvent}\n      >\n        로그인 후 이용할 수 있는 서비스 입니다.\n        <br /> 로그인 하시겠습니까?\n      </Modal>\n    </>\n  );\n};\n\nexport default Header;\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\MobileBottomNav.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\SideNav.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\setting\\Setting.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\AccordianMenu.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\AuthChecker.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Button.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\IconButton.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\Input.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\Themes.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\UpdateNickName.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\UpdatePassword.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\UpdateUserProfile.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\detail\\[id].tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\auth\\SocialSuccess.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\findPassword\\FindPwd.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\findPwdComplete\\FindPwdComplete.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\search\\index.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\signUpComplete\\SignUpComplete.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\User\\FollowTab.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\User\\[id].tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\AlarmBar.tsx",["536"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Bell } from '@/components/common/SVG';\nimport useSwipe from '@/hooks/useSwipe';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@/redux/config/configStore';\n\nconst AlarmContainerStyle = styled.div`\n  max-width: 320px;\n  width: 90%;\n  position: fixed;\n  top: 30px;\n  left: 50%;\n  transform: translateX(-50%);\n  z-index: 999;\n`;\n\nconst AlarmBox = styled.div`\n  width: 100%;\n  padding: 8px;\n  background-color: rgba(0, 0, 0, 0.6);\n  border-radius: 18px;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin-bottom: 12px;\n  transition: all 0.3s ease-in-out;\n  animation: fadeIn 1s forwards ease-in-out, fadeOut 1s forwards ease-in-out;\n  animation-delay: 0s, 5s;\n  &.fade-out {\n    /* background-color: red; */\n\n    animation: ready-fadeOut 1s forwards ease-in-out;\n  }\n  p {\n    width: calc(100% - 24px);\n    text-align: center;\n    font-weight: 700;\n    font-size: 14px;\n    color: #fff;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n  }\n  @keyframes fadeIn {\n    0% {\n      opacity: 0;\n      transform: translate(0, -100px);\n    }\n    100% {\n      opacity: 1;\n      transform: translate(0, 0);\n    }\n  }\n  @keyframes fadeOut {\n    0% {\n      opacity: 1;\n      transform: translate(0, 0);\n    }\n    99% {\n      opacity: 0;\n      transform: translate(600%, 0);\n    }\n    100% {\n      opacity: 0;\n      transform: translate(600%, 0);\n      display: none;\n    }\n  }\n  @keyframes ready-fadeOut {\n    0% {\n      opacity: 1;\n      transform: translate(0, 0);\n    }\n    99% {\n      opacity: 0;\n      transform: translate(600%, 0);\n    }\n    100% {\n      opacity: 0;\n      transform: translate(600%, 0);\n      display: none;\n    }\n  }\n`;\n\nconst AlarmIconBox = styled.div`\n  width: 20px;\n  height: 20px;\n  background-color: var(--primary-color);\n  padding: 2px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  svg {\n    width: 80%;\n    height: 80%;\n  }\n`;\n\nconst FADE_OUT_INTERVAL = 5000;\n\ntype Props = {\n  className?: string;\n  alarm: { message: string; id: number };\n  // alarm: string;\n  isShow?: boolean;\n  setIsShow?: any;\n};\n\nexport const AlarmBar = ({ alarm }: Props) => {\n  const [isShow, setIsShow] = useState<boolean>(true);\n  const leftAction = () => {};\n\n  const rightAction = () => {\n    setIsShow(false);\n  };\n  const {\n    handleMouseDown,\n    handleMouseUp,\n    handleMouseMove,\n    handleTouchStart,\n    handleTouchMove,\n    handleTouchEnd,\n  } = useSwipe(leftAction, rightAction);\n\n  return (\n    <AlarmBox\n      className={!isShow ? 'fade-out' : ''}\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      <AlarmIconBox>\n        <Bell fillColor={'#fff'} $isPush={true} />\n      </AlarmIconBox>\n      <p>{alarm.message}</p>\n    </AlarmBox>\n  );\n};\n\ntype alarmProps = {\n  alarmData?: any;\n};\n\nconst AlarmContainer = ({ alarmData }: alarmProps) => {\n  const message = useSelector((state: RootState) => state.notification.message);\n  //console.log(message);\n  const [alarmArr, setAlarmArr] = useState<any[]>([]);\n\n  const addNotification = (message: any) => {\n    const newNotification = {\n      message,\n      id: Date.now(),\n    };\n    setAlarmArr((prevArr) => [...prevArr, newNotification]);\n    setTimeout(() => {\n      removeNotification(newNotification.id); // Remove notification from the array\n    }, FADE_OUT_INTERVAL + 2000);\n  };\n\n  const removeNotification = (id: any) => {\n    setAlarmArr((prevArr) =>\n      prevArr.filter((notification) => notification.id !== id)\n    );\n  };\n  //console.log(alarmArr);\n  useEffect(() => {\n    if (message) {\n      addNotification(message);\n    }\n  }, [message]);\n\n  return (\n    <>\n      <AlarmContainerStyle>\n        {alarmArr.map((alarm) => {\n          return <AlarmBar alarm={alarm} key={alarm.id} />;\n        })}\n      </AlarmContainerStyle>\n    </>\n  );\n};\nexport default AlarmContainer;\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\CommentModal.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\HeartIcon.tsx",["537"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { likePost } from '@/apis/post';\nimport { LikeCloud } from './SVG';\nimport { UserState } from '@/redux/reducers/userSlice';\nimport { RootState } from '@/redux/config/configStore';\nimport { useSelector } from 'react-redux';\nimport Modal from './Modal';\nimport { useRouter } from 'next/router';\ntype iconType = {\n  $isLike: boolean;\n};\n\nconst HeartIconBox = styled.div<iconType>`\n  width: 36px;\n  height: 36px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ${(props) =>\n    props.$isLike ? `var(--primary-second-color)` : `var(--heart-color)`};\n  border-radius: 50%;\n  position: absolute;\n  top: 5px;\n  right: 5px;\n  transition: all 0.2s ease-in-out;\n  z-index: 101;\n  cursor: pointer;\n  svg {\n    transform: translate(-1px, -1px);\n  }\n  &:hover {\n    background-color: var(--heart-color-hover);\n  }\n`;\n\ntype Props = {\n  postId: number | string;\n};\n\nconst HeartIcon = ({ postId }: Props) => {\n  const [isLike, setIsLike] = useState<boolean>(false);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [modalMessge, setModalMessge] = useState<any>({\n    actionText: '',\n    modalMessge: '',\n    onClickEvent: '',\n  });\n  const router = useRouter();\n  const { user }: { user: UserState['user'] } = useSelector(\n    (state: RootState) => state.user\n  );\n\n  useEffect(() => {\n    const likePostIndex = user?.likePosts;\n    const test = likePostIndex?.find((post) => post === postId);\n    if (test !== undefined) {\n      setIsLike(true);\n    } else {\n      setIsLike(false);\n    }\n  }, [user]);\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation((postId: string) => likePost(postId), {\n    // 뮤테이션 성공 시 쿼리 무효화\n    onSuccess: () => {\n      queryClient.invalidateQueries('users');\n    },\n  });\n  const modalHandler = () => {\n    router.push('/auth/SignIn');\n  };\n  const onClickHeartHandler = (\n    postId: number | string,\n    event: React.MouseEvent\n  ) => {\n    event.stopPropagation();\n    event.preventDefault();\n\n    if (user.email === null) {\n      setModalMessge({\n        actionText: '확인',\n        modalMessge: '로그인이 필요한 서비스입니다. 로그인 하시겠습니까?',\n        onClickEvent: modalHandler,\n      });\n      setIsOpen(!isOpen);\n    } else {\n      setIsLike(!isLike);\n      mutation.mutate(postId.toString());\n    }\n  };\n  return (\n    <>\n      <HeartIconBox\n        onClick={(event) => onClickHeartHandler(postId, event)}\n        $isLike={isLike}\n        className=\"heart\"\n      >\n        <LikeCloud />\n      </HeartIconBox>\n      <Modal\n        isOpen={isOpen}\n        setIsOpen={setIsOpen}\n        actionText={modalMessge.actionText}\n        onClickEvent={modalMessge.onClickEvent}\n      >\n        로그인 후 이용할 수 있는 서비스 입니다.\n        <br /> 로그인 하시겠습니까?\n      </Modal>\n    </>\n  );\n};\n\nexport default HeartIcon;\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\KebabMenuUI.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\layout\\Layout.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Modal.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\ProfileImage.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\SelectUI.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\SVG.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\TabBarLinkButton.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\UpAndDownTab.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\Comment.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\DetailProfile.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\FindPassword\\FindPassword.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\MainBanner.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\PopularContentsCarousel.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Search\\SearchResult.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Setting\\Profile.tsx",["538"],[],"import React, { useEffect, useState } from 'react';\nimport Image from 'next/image';\nimport { ProfileBox } from '@/styles/setting';\nimport { profilePreset } from '@/public/presetData';\n\ntype ProfileProps = {\n  userImage?: string;\n  preset?: number;\n  nick?: string;\n  email?: string;\n  direction?: 'column' | 'row';\n};\n\nconst Profile = ({\n  userImage,\n  preset,\n  nick,\n  email,\n  direction,\n}: ProfileProps) => {\n  const [profileImage, setProfileImage] = useState<string | undefined>();\n  const [nickname, setNickname] = useState<string>('nick');\n\n  useEffect(() => {\n    if (preset === 1) {\n      setProfileImage(userImage);\n    } else {\n      const foundPreset = profilePreset.find(\n        (presetElement, idx) => idx + 2 === preset\n      );\n      setProfileImage(foundPreset);\n    }\n  }, [preset]);\n\n  useEffect(() => {\n    setNickname(nick || '');\n  }, [nick]);\n\n  return (\n    <ProfileBox direction={direction}>\n      <div className=\"image\">\n        {profileImage && (\n          <Image\n            src={profileImage}\n            alt={'image'}\n            width={74}\n            height={74}\n            priority\n          />\n        )}\n      </div>\n      <div>\n        <h2>{nickname}</h2>\n        <span></span>\n        <p style={{ fontSize: '12px' }}>{email}</p>\n      </div>\n    </ProfileBox>\n  );\n};\nexport default React.memo(Profile);\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\User\\FollowButton.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\Accordion.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\CustomPlayer.tsx",["539"],[],"import {\r\n  CloseButton,\r\n  CustomPlayerWrapper,\r\n  PlayButton,\r\n  PlayButtonGroup,\r\n  PlayerControls,\r\n  PlayHeader,\r\n  SeekSlider,\r\n  SeekSliderGroup,\r\n  TimeLabel,\r\n  TitleBox,\r\n  VolumeButton,\r\n  VolumeSlider,\r\n  VolumeSliderGroup,\r\n} from '@/styles/youtubeplayer';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport Image from 'next/image';\r\n\r\nimport playImage from '@/public/play.png';\r\nimport pauseImage from '@/public/pause.png';\r\nimport { Volume, Xmark } from '../common/SVG';\r\n\r\ninterface UniversalPlayerProps {\r\n  audioUrl: string | undefined;\r\n  setAudioUrl: React.Dispatch<React.SetStateAction<string | undefined>>;\r\n  setMusicType?: React.Dispatch<React.SetStateAction<number>>;\r\n  setMusicChoose?: React.Dispatch<React.SetStateAction<number>>;\r\n  setAudioSubmit?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  title?: string;\r\n  propsduration?: number;\r\n  update: string;\r\n}\r\n\r\nconst formatTime = (time: number) => {\r\n  const minutes = Math.floor(time / 60);\r\n  const seconds = Math.floor(time % 60);\r\n  return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n};\r\n\r\nconst CustomPlayer = ({\r\n  audioUrl,\r\n  setAudioUrl,\r\n  setMusicType,\r\n  setMusicChoose,\r\n  setAudioSubmit,\r\n  title,\r\n  propsduration,\r\n  update,\r\n}: UniversalPlayerProps) => {\r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n  const [playing, setPlaying] = useState(false);\r\n  const [duration, setDuration] = useState(0);\r\n  const [seek, setSeek] = useState(0);\r\n  const [isVolume, setIsVolume] = useState<boolean>(false);\r\n\r\n  const handleVolumeClick = () => {\r\n    setIsVolume(!isVolume);\r\n  };\r\n\r\n  const handlePlayPause = () => {\r\n    if (audioRef.current) {\r\n      if (playing) {\r\n        audioRef.current.pause();\r\n      } else {\r\n        audioRef.current.play();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSeekChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const time = +e.target.value;\r\n    setSeek(time);\r\n    if (audioRef.current) {\r\n      audioRef.current.currentTime = time;\r\n    }\r\n  };\r\n\r\n  const handleVolumeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (audioRef.current) {\r\n      audioRef.current.volume = +e.target.value / 100;\r\n    }\r\n  };\r\n\r\n  const handleClosePlayer = () => {\r\n    if (audioRef.current) {\r\n      audioRef.current.pause(); // 재생 중지\r\n    }\r\n    setAudioUrl(''); // 플레이어 제거\r\n    setSeek(0);\r\n    setDuration(0);\r\n    if (setMusicChoose && setMusicType) {\r\n      setMusicChoose(0);\r\n      setMusicType(0);\r\n    }\r\n    if (setAudioSubmit) {\r\n      setAudioSubmit(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      const handleLoadedMetadata = () => {\r\n        if (audioRef.current) {\r\n          setDuration(audioRef.current.duration);\r\n        }\r\n      };\r\n\r\n      if (propsduration === undefined) {\r\n        audioRef.current.addEventListener(\r\n          'loadedmetadata',\r\n          handleLoadedMetadata\r\n        );\r\n      }\r\n\r\n      audioRef.current.addEventListener('timeupdate', () => {\r\n        if (audioRef.current) {\r\n          setSeek(audioRef.current.currentTime);\r\n        }\r\n      });\r\n\r\n      audioRef.current.addEventListener('pause', () => setPlaying(false));\r\n      audioRef.current.addEventListener('play', () => setPlaying(true));\r\n\r\n      return () => {\r\n        if (audioRef.current) {\r\n          audioRef.current.removeEventListener(\r\n            'loadedmetadata',\r\n            handleLoadedMetadata\r\n          );\r\n        }\r\n      };\r\n    }\r\n  }, [propsduration]);\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      audioRef.current.play().catch((error) => {\r\n        // 자동 재생 정책에 의해 재생이 차단될 수 있으므로 여기에서 오류 처리를 할 수 있습니다.\r\n        // console.error('자동 재생 실패:', error);\r\n      });\r\n    }\r\n  }, [audioUrl]);\r\n\r\n  return (\r\n    <>\r\n      <CustomPlayerWrapper>\r\n        <audio ref={audioRef} src={audioUrl} style={{ display: 'none' }} />\r\n        <PlayHeader>\r\n          <TitleBox>{title}</TitleBox>\r\n          {update !== '3' && (\r\n            <CloseButton type=\"button\" onClick={handleClosePlayer}>\r\n              <Xmark />\r\n            </CloseButton>\r\n          )}\r\n        </PlayHeader>\r\n        <PlayerControls>\r\n          <SeekSliderGroup>\r\n            <TimeLabel>{formatTime(seek)}</TimeLabel>\r\n            <SeekSlider\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max={propsduration ?? duration}\r\n              value={seek}\r\n              onChange={handleSeekChange}\r\n              step={0.01}\r\n            />\r\n            <TimeLabel className=\"end\">\r\n              {formatTime(propsduration ?? duration)}\r\n            </TimeLabel>\r\n          </SeekSliderGroup>\r\n          <PlayButtonGroup>\r\n            <PlayButton type=\"button\" onClick={handlePlayPause}>\r\n              {playing ? (\r\n                <Image src={pauseImage} alt=\"Pause\" width={25} height={25} />\r\n              ) : (\r\n                <Image src={playImage} alt=\"Play\" width={25} height={25} />\r\n              )}\r\n            </PlayButton>\r\n          </PlayButtonGroup>\r\n          <PlayButtonGroup>\r\n            <VolumeButton type=\"button\" onClick={handleVolumeClick}>\r\n              <Volume />\r\n              {/* <Image src={pauseImage} alt=\"Pause\" width={25} height={25} /> */}\r\n            </VolumeButton>\r\n          </PlayButtonGroup>\r\n          {isVolume && (\r\n            <VolumeSliderGroup>\r\n              <VolumeSlider\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max=\"100\"\r\n                onChange={handleVolumeChange}\r\n              />\r\n            </VolumeSliderGroup>\r\n          )}\r\n        </PlayerControls>\r\n      </CustomPlayerWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomPlayer;\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\MusicSelector.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\RecordingInfo.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\RecordPlayer.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\CustomButton.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\update\\[id].tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ReadOnlyMap.tsx",["540"],[],"import React, { useEffect, useRef } from 'react';\r\nimport Script from 'next/script';\r\nimport { InputBox } from '@/styles/write';\r\n\r\ninterface Location {\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface Marker {\r\n  setMap: (map: any | null) => void;\r\n}\r\n\r\ninterface MapComponentProps {\r\n  location: Location;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    naver: {\r\n      maps: {\r\n        Map: any;\r\n        Event: {\r\n          addListener: (\r\n            instance: any,\r\n            eventName: string,\r\n            handler: (...args: any[]) => void\r\n          ) => void;\r\n        };\r\n        Marker: any;\r\n        LatLng: any;\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\nexport const ReadOnlyMap: React.FC<MapComponentProps> = ({ location }) => {\r\n  const mapContainerRef = useRef(null);\r\n  const mapRef = useRef<any>(null);\r\n  const markerRef = useRef<Marker | null>(null);\r\n\r\n  const initializeMap = () => {\r\n    if (\r\n      mapContainerRef.current &&\r\n      location.x &&\r\n      location.y &&\r\n      window.naver?.maps\r\n    ) {\r\n      const centerPosition = new window.naver.maps.LatLng(\r\n        location.y,\r\n        location.x\r\n      );\r\n\r\n      mapRef.current = new window.naver.maps.Map(mapContainerRef.current, {\r\n        center: centerPosition,\r\n        zoom: 15,\r\n      });\r\n\r\n      markerRef.current = new window.naver.maps.Marker({\r\n        position: centerPosition,\r\n        map: mapRef.current,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializeMap();\r\n  }, [location]);\r\n\r\n  return (\r\n    <>\r\n      <Script\r\n        strategy=\"afterInteractive\"\r\n        type=\"text/javascript\"\r\n        src={`https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${process.env.NEXT_PUBLIC_NAVERMAP_API_KEY}`}\r\n        onReady={() => initializeMap()}\r\n      />\r\n      <InputBox\r\n        type=\"text\"\r\n        placeholder=\"장소를 입력해주세요\"\r\n        value={location.name}\r\n        readOnly\r\n      />\r\n      <div\r\n        style={{\r\n          position: 'relative',\r\n          width: '100%',\r\n          height: '40vh',\r\n          margin: '20px 0',\r\n        }}\r\n      >\r\n        <div\r\n          ref={mapContainerRef}\r\n          id=\"map\"\r\n          style={{ width: '100%', height: '100%' }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Write\\ReadOnlyYoutube.tsx",["541"],[],"import { CloseButton, PlayerWrapper } from '@/styles/youtubeplayer';\r\nimport Script from 'next/script';\r\nimport React, { FormEvent, useEffect, useRef, useState } from 'react';\r\nimport { Xmark } from '../common/SVG';\r\n\r\ninterface YoutubePlayerProps {\r\n  videoId: string;\r\n  setVideoId?: React.Dispatch<React.SetStateAction<string>>;\r\n  setSelectedTitle?: React.Dispatch<React.SetStateAction<string>>;\r\n  setMusicType?: React.Dispatch<React.SetStateAction<number>>;\r\n  setMusicChoose?: React.Dispatch<React.SetStateAction<number>>;\r\n  setAudioSubmit?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  update: string;\r\n}\r\n\r\ninterface Windows extends Window {\r\n  onYouTubeIframeAPIReady: () => void;\r\n}\r\n\r\nconst ReadOnlyYoutube = ({\r\n  videoId,\r\n  setVideoId,\r\n  setSelectedTitle,\r\n  setMusicType,\r\n  setMusicChoose,\r\n  setAudioSubmit,\r\n  update,\r\n}: YoutubePlayerProps) => {\r\n  const [player, setPlayer] = useState<YT.Player | null>(null);\r\n  const playerRef = useRef<HTMLDivElement | null>(null);\r\n  const [playing, setPlaying] = useState(false);\r\n  const [seek, setSeek] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [title, setTitle] = useState<string | null>(null);\r\n\r\n  const handleClosePlayer = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    setTitle('');\r\n    if (setVideoId) setVideoId('');\r\n    if (setSelectedTitle) setSelectedTitle('');\r\n    if (setMusicType) setMusicType(0);\r\n    if (setMusicChoose) setMusicChoose(0);\r\n    if (setAudioSubmit) setAudioSubmit(false);\r\n    setSeek(0);\r\n    setDuration(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    function createPlayer() {\r\n      if (!videoId && player) {\r\n        player.destroy();\r\n        setPlayer(null);\r\n      }\r\n      if (videoId && !player && playerRef.current) {\r\n        const url = new URL(videoId);\r\n        const videoIdParam = url.searchParams.get('v');\r\n        if (videoIdParam) {\r\n          const newPlayer = new YT.Player(playerRef.current, {\r\n            videoId: videoIdParam,\r\n            height: '150',\r\n            width: '400',\r\n            playerVars: {\r\n              autoplay: 1,\r\n            },\r\n            events: {\r\n              onReady: (event) => {\r\n                const playerInstance = event.target;\r\n                setTitle(playerInstance.getVideoData().title);\r\n                setPlayer(playerInstance);\r\n              },\r\n              onStateChange: (event) => {\r\n                if (event.data === YT.PlayerState.PLAYING) {\r\n                  setPlaying(true);\r\n                } else if (event.data === YT.PlayerState.PAUSED) {\r\n                  setPlaying(false);\r\n                } else if (event.data === YT.PlayerState.ENDED) {\r\n                  setPlaying(false);\r\n                  setSeek(duration); // 플레이가 종료되면 Seek을 duration으로 설정\r\n                }\r\n              },\r\n              onError: (event) => {\r\n                if ([2, 5, 100, 101, 150].includes(event.data)) {\r\n                  if (setVideoId) setVideoId('');\r\n                  if (setSelectedTitle) setSelectedTitle('');\r\n                  if (setMusicType) setMusicType(0);\r\n                  setTitle('');\r\n                  setSeek(0);\r\n                  setDuration(0);\r\n                }\r\n              },\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    if (typeof window !== 'undefined') {\r\n      if ('YT' in window) {\r\n        createPlayer();\r\n      } else {\r\n        (window as Windows).onYouTubeIframeAPIReady = () => {\r\n          createPlayer();\r\n        };\r\n      }\r\n    }\r\n  }, [videoId, player]);\r\n\r\n  return (\r\n    <>\r\n      <PlayerWrapper videoId={videoId}>\r\n        {update !== '3' && (\r\n          <CloseButton onClick={handleClosePlayer}>\r\n            <Xmark />\r\n          </CloseButton>\r\n        )}\r\n        <div id=\"player\" ref={playerRef} />\r\n        <Script src=\"https://www.youtube.com/iframe_api\" />\r\n      </PlayerWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReadOnlyYoutube;\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\FollowList.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\RecordButton.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\DetailComments.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Feed\\FeedUi.tsx",["542"],[],"import React, { useCallback, useEffect, useState } from 'react';\nimport { FeedSection } from '../../styles/feed';\nimport { useInfiniteQuery, useMutation } from 'react-query';\nimport { getFeed, reportPost } from '@/apis/post';\nimport Modal from '../common/Modal';\nimport { InView, useInView } from 'react-intersection-observer';\nimport FeedPost from './FeedPost';\nimport { useRouter } from 'next/router';\n\ninterface ModalMessage {\n  actionText: string;\n  modalMessge: string | undefined;\n  onClickEvent: any;\n}\ninterface ExpandedPosts {\n  [key: number]: boolean;\n}\ninterface Feed {\n  content: string;\n  email: string;\n  image: string;\n  musicTitle: string;\n  musicUrl: string | null;\n  nickname: string;\n  updatedAt: string;\n  userImage: string;\n  postId: number;\n  preset: number;\n  userId: number;\n  tags: string[];\n}\nconst FeedUi = () => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [modalMessge, setModalMessge] = useState<ModalMessage>({\n    actionText: '',\n    modalMessge: '',\n    onClickEvent: '',\n  });\n  const [expandedPosts, setExpandedPosts] = useState<ExpandedPosts>({});\n  const [ref, inView] = useInView();\n  const route = useRouter();\n\n  let results: Feed[] = [];\n  const {\n    data,\n    isLoading,\n    isSuccess,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery('feeds', ({ pageParam = 1 }) => getFeed({ pageParam }), {\n    getNextPageParam: (lastPage, allPages) => {\n      const morePagesExist = allPages.length < lastPage.totalPages;\n      return morePagesExist ? allPages.length + 1 : false;\n    },\n    refetchOnWindowFocus: false,\n  });\n\n  const { mutate: report } = useMutation(reportPost, {\n    onSuccess: (message) => {\n      setModalMessge({\n        actionText: '확인',\n        modalMessge: message,\n        onClickEvent: null,\n      });\n      setIsModalOpen(true);\n    },\n  });\n\n  const handleReportClick = useCallback(\n    (id: any) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        setModalMessge({\n          actionText: '신고',\n          modalMessge: '해당 사용자를 신고하시겠습니까?',\n          onClickEvent: () => report(id),\n        });\n      } else {\n        setModalMessge({\n          actionText: '확인',\n          modalMessge: '로그인이 필요한 서비스입니다.',\n          onClickEvent: () => route.push('/auth/SignIn'),\n        });\n      }\n      setIsModalOpen(true);\n    },\n    [report]\n  );\n\n  const toggleExpanded = useCallback((postId: number) => {\n    setExpandedPosts((prevState: ExpandedPosts) => ({\n      ...prevState,\n      [postId]: !prevState[postId],\n    }));\n  }, []);\n\n  const handleFetchMore = useCallback(() => {\n    fetchNextPage();\n  }, [fetchNextPage]);\n\n  if (isSuccess) {\n    data.pages.forEach((page) => results.push(...page.content));\n  }\n\n  useEffect(() => {\n    const scrollPos = sessionStorage.getItem('scrollPos');\n    if (scrollPos) {\n      window.scrollTo(0, parseInt(scrollPos));\n    }\n    window.addEventListener('beforeunload', () => {\n      sessionStorage.removeItem('scrollPos');\n    });\n  }, [data]);\n\n  return (\n    <FeedSection>\n      <Modal\n        isOpen={isModalOpen}\n        setIsOpen={setIsModalOpen}\n        actionText={modalMessge.actionText}\n        onClickEvent={modalMessge.onClickEvent}\n      >\n        {modalMessge.modalMessge}\n      </Modal>\n      {results?.map((post: Feed) => (\n        <FeedPost\n          key={post.postId}\n          feed={post}\n          handleReportClick={handleReportClick}\n          toggleExpanded={toggleExpanded}\n          isExpanded={expandedPosts[post.postId]}\n        />\n      ))}\n\n      {hasNextPage && (\n        <InView\n          as=\"div\"\n          onChange={(inView, entry) => {\n            if (inView) handleFetchMore();\n          }}\n          style={{ height: '200px', opacity: 0 }}\n        />\n      )}\n    </FeedSection>\n  );\n};\n\nexport default FeedUi;\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Home\\InfiniteCarousel.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Search\\UserSearchResult.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SignInControls.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignIn\\SignInInput.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpCheck.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpControl.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpNickname.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\SignUp\\SignUpPwd.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Search\\SearchComponent.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\OneButtonModal.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Socket.tsx",["543"],[],"import { RootState } from '@/redux/config/configStore';\r\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATION, LOAD_POST } from '@/redux/reducers/notificationSlice';\r\nimport { UserState } from '@/redux/reducers/userSlice';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport socketIOClient from 'socket.io-client';\r\n\r\nconst ENDPOINT = `${process.env.NEXT_PUBLIC_LOCAL_SERVER}`;\r\n\r\ninterface SocketManagerProps {\r\n  setNotification: React.Dispatch<React.SetStateAction<string | null>>;\r\n  setRandomPosts: React.Dispatch<React.SetStateAction<any[] | null>>;\r\n}\r\n\r\nfunction SocketManager({\r\n  setNotification,\r\n  setRandomPosts,\r\n}: SocketManagerProps) {\r\n  const { user }: { user: UserState['user'] } = useSelector(\r\n    (state: RootState) => state.user\r\n  );\r\n  const dispatch = useDispatch();\r\n  // console.log('소켓 컴포넌트');\r\n\r\n  // const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    const socket = socketIOClient(ENDPOINT);\r\n    // push가 true인 경우에만 소켓 이벤트를 수신\r\n    // console.log('푸시 설정 ON');\r\n\r\n    socket.on('notify-post', (data) => {\r\n      if (user.push) setNotification(data.message);\r\n    });\r\n\r\n    socket.on('loginSuccess', (data) => {\r\n      const { email, nickname } = data;\r\n      if (user.push)\r\n        setNotification(\r\n          `User ${nickname} with email ${email} logged in successfully.`\r\n        );\r\n      dispatch(ADD_NOTIFICATION(`${nickname}님이 로그인 하셨습니다.`));\r\n      setTimeout(() => {\r\n        dispatch(CLEAR_NOTIFICATION());\r\n\r\n        setNotification(null);\r\n      }, 5000);\r\n    });\r\n\r\n    socket.on('random-posts', (posts) => {\r\n      if (user.push) setRandomPosts(posts);\r\n    });\r\n\r\n    socket.on('newPost', () => {\r\n      if (user.push) setNotification(`새 글이 등록 되었습니다.`);\r\n      dispatch(ADD_NOTIFICATION(`새 글이 등록 되었습니다.`));\r\n    });\r\n\r\n    socket.on('latest-posts', (data) => {\r\n      dispatch(LOAD_POST(data));\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n    };\r\n  }, [user.push, setNotification, setRandomPosts]); // user.push를 의존성 배열에 추가\r\n\r\n  return null; // 이 컴포넌트는 UI를 렌더링하지 않습니다.\r\n}\r\n\r\nexport default SocketManager;\r\n","C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\Tabs.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\CommentForm.tsx",["544"],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\DetailKebabMenu.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Detail\\ZoomImage.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\Feed\\FeedPost.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\feed\\index.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\MoveStartpage.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\ThemedApp.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\components\\common\\ThemeInitializer.tsx",[],[],"C:\\study\\sparta\\mainproject\\HAPOOM-FE\\pages\\api\\auth\\[...nextauth].ts",[],[],{"ruleId":"545","severity":1,"message":"546","line":143,"column":5,"nodeType":"547","endLine":143,"endColumn":49,"suggestions":"548"},{"ruleId":"545","severity":1,"message":"549","line":302,"column":6,"nodeType":"547","endLine":302,"endColumn":18,"suggestions":"550"},{"ruleId":"545","severity":1,"message":"549","line":81,"column":5,"nodeType":"547","endLine":81,"endColumn":20,"suggestions":"551"},{"ruleId":"545","severity":1,"message":"552","line":132,"column":6,"nodeType":"547","endLine":132,"endColumn":23,"suggestions":"553"},{"ruleId":"545","severity":1,"message":"554","line":122,"column":6,"nodeType":"547","endLine":122,"endColumn":8,"suggestions":"555"},{"ruleId":"545","severity":1,"message":"556","line":177,"column":6,"nodeType":"547","endLine":177,"endColumn":15,"suggestions":"557"},{"ruleId":"545","severity":1,"message":"558","line":63,"column":6,"nodeType":"547","endLine":63,"endColumn":12,"suggestions":"559"},{"ruleId":"545","severity":1,"message":"560","line":33,"column":6,"nodeType":"547","endLine":33,"endColumn":14,"suggestions":"561"},{"ruleId":"545","severity":1,"message":"562","line":126,"column":20,"nodeType":"563","endLine":126,"endColumn":27},{"ruleId":"545","severity":1,"message":"564","line":69,"column":6,"nodeType":"547","endLine":69,"endColumn":16,"suggestions":"565"},{"ruleId":"545","severity":1,"message":"566","line":106,"column":6,"nodeType":"547","endLine":106,"endColumn":23,"suggestions":"567"},{"ruleId":"545","severity":1,"message":"568","line":88,"column":5,"nodeType":"547","endLine":88,"endColumn":13,"suggestions":"569"},{"ruleId":"545","severity":1,"message":"570","line":65,"column":6,"nodeType":"547","endLine":65,"endColumn":50,"suggestions":"571"},{"ruleId":"545","severity":1,"message":"572","line":57,"column":5,"nodeType":"547","endLine":57,"endColumn":17,"suggestions":"573"},"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'openModal' and 'resizeImage'. Either include them or remove the dependency array.","ArrayExpression",["574"],"React Hook useCallback has a missing dependency: 'openModal'. Either include it or remove the dependency array.",["575"],["576"],"React Hook useEffect has missing dependencies: 'duration', 'intervalId', 'setAudioSubmit', 'setSelectedTitle', and 'setVideoId'. Either include them or remove the dependency array. If 'setAudioSubmit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["577"],"React Hook useEffect has missing dependencies: 'requestNotificationPermission' and 'user.email'. Either include them or remove the dependency array.",["578"],"React Hook useEffect has a missing dependency: 'addNotification'. Either include it or remove the dependency array.",["579"],"React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.",["580"],"React Hook useEffect has a missing dependency: 'userImage'. Either include it or remove the dependency array. If 'setProfileImage' needs the current value of 'userImage', you can also switch to useReducer instead of useState and read 'userImage' in the reducer.",["581"],"The ref value 'audioRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'audioRef.current' to a variable inside the effect, and use that variable in the cleanup function.","Identifier","React Hook useEffect has a missing dependency: 'initializeMap'. Either include it or remove the dependency array.",["582"],"React Hook useEffect has missing dependencies: 'duration', 'setMusicType', 'setSelectedTitle', and 'setVideoId'. Either include them or remove the dependency array. If 'setVideoId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["583"],"React Hook useCallback has a missing dependency: 'route'. Either include it or remove the dependency array.",["584"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["585"],"React Hook useCallback has an unnecessary dependency: 'setComment'. Either exclude it or remove the dependency array.",["586"],{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},"Update the dependencies array to be: [images, openModal, resizeImage, setImages, setImageURLs, imageURLs]",{"range":"613","text":"614"},"Update the dependencies array to be: [openModal]",{"range":"615","text":"616"},"Update the dependencies array to be: [tags, openModal, setTags]",{"range":"617","text":"618"},"Update the dependencies array to be: [videoId, player, setAudioSubmit, duration, intervalId, setVideoId, setSelectedTitle]",{"range":"619","text":"620"},"Update the dependencies array to be: [requestNotificationPermission, user.email]",{"range":"621","text":"622"},"Update the dependencies array to be: [addNotification, message]",{"range":"623","text":"624"},"Update the dependencies array to be: [postId, user]",{"range":"625","text":"626"},"Update the dependencies array to be: [preset, userImage]",{"range":"627","text":"628"},"Update the dependencies array to be: [initializeMap, location]",{"range":"629","text":"630"},"Update the dependencies array to be: [videoId, player, duration, setVideoId, setSelectedTitle, setMusicType]",{"range":"631","text":"632"},"Update the dependencies array to be: [report, route]",{"range":"633","text":"634"},"Update the dependencies array to be: [user.push, setNotification, setRandomPosts, dispatch]",{"range":"635","text":"636"},"Update the dependencies array to be: []",{"range":"637","text":"638"},[4222,4266],"[images, openModal, resizeImage, setImages, setImageURLs, imageURLs]",[7724,7736],"[openModal]",[2399,2414],"[tags, openModal, setTags]",[4302,4319],"[videoId, player, setAudioSubmit, duration, intervalId, setVideoId, setSelectedTitle]",[3785,3787],"[requestNotificationPermission, user.email]",[3913,3922],"[addNotification, message]",[1690,1696],"[postId, user]",[792,800],"[preset, userImage]",[1484,1494],"[initializeMap, location]",[3510,3527],"[videoId, player, duration, setVideoId, setSelectedTitle, setMusicType]",[2376,2384],"[report, route]",[1964,2008],"[user.push, setNotification, setRandomPosts, dispatch]",[1561,1573],"[]"]